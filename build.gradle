buildscript {
    repositories {
        maven {
            url "https://maven.aliyun.com/repository/central"
        }
        google()
        jcenter()
    }
    dependencies {
//        classpath 'commons-io:commons-io:1.4'
        // https://mvnrepository.com/artifact/net.sf.proguard/proguard-gradle
        classpath group: 'net.sf.proguard', name: 'proguard-gradle', version: '6.0.3'

    }
}

plugins {
    id 'java'
    id 'groovy'
    id 'maven-publish'
    id "com.github.johnrengelman.shadow" version "5.0.0"
    id "com.jfrog.bintray" version "1.8.4"
}

sourceCompatibility = 1.8


repositories {
    maven {
        url "https://maven.aliyun.com/repository/central"
    }
    google()
    jcenter()
}

dependencies {
//    compile 'com.android.tools.build:gradle:3.3.2'
    compile 'org.apache.commons:commons-csv:1.6'
    compile 'com.belerweb:pinyin4j:2.5.1'
    compile 'org.apache.tika:tika-core:1.10'
    compile("org.apache.tika:tika-parsers:1.10") {
        // 仅使用该包中的文件编码识别功能,无需导入其他依赖.
        exclude module: '*'
    }

    // https://mvnrepository.com/artifact/biz.aQute.bnd/annotation
    shadow group: 'biz.aQute.bnd', name: 'annotation', version: '2.4.0'



    shadow localGroovy()
    shadow gradleApi()

    // https://mvnrepository.com/artifact/junit/junit
    testCompile 'junit:junit:4.12'

}


task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

javadoc {
    options {
        failOnError false
        encoding "utf-8"
        charSet "utf-8"
        links "http://docs.oracle.com/javase/8/docs/api/"
    }
    // fix java 8 very strict.
    if (JavaVersion.current().isJava8Compatible()) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}


compileJava {
    options.encoding = "UTF-8"
}

//compileGroovy { groovyOptions.encoding = "UTF-8" }

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

shadowJar {
}

def rpmArtifact = artifacts.add('archives', file("${project.getBuildDir()}/libs/android-csv-variants-mini.jar")) {
    type 'rpm'
}

task proguard(type: proguard.gradle.ProGuardTask) {
    dependsOn('shadowJar')

    // You should probably import a more compact ProGuard-style configuration
    // file for all static settings, but we're specifying them all here, for
    // the sake of the example.
    //configuration 'configuration.pro'

    // Specify the input jars, output jars, and library jars.
    // In this case, the input jar is the program library that we want to process.

    injars "${project.getBuildDir()}/libs/android-csv-variants-all.jar"
    outjars "${project.getBuildDir()}/libs/android-csv-variants-mini.jar"



    libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
    configurations.shadow.each { File file -> libraryjars file.getAbsolutePath() }



    // Save the obfuscation mapping to a file, so we can de-obfuscate any stack
    // traces later on. Keep a fixed source file attribute and all line number
    // tables to get line numbers in the stack traces.
    // You can comment this out if you're not interested in stack traces.

    printmapping 'out.map'
    keepparameternames
    renamesourcefileattribute 'SourceFile'
    keepattributes 'Exceptions,InnerClasses,Signature,Deprecated,SourceFile,LineNumberTable,EnclosingMethod'

    // Preserve all annotations.

    keepattributes '*Annotation*'


    dontwarn 'org.gradle.internal.**'
    dontwarn 'org.apache.tika.**'

    // Your library may contain more items that need to be preserved;
    // typically classes that are dynamically created using Class.forName:

    keepnames 'class ** { *; }'
    keepclasseswithmembers 'public class VariantsUtil { \
        public static <methods>;  \
    }'

    keepclasseswithmembers 'public class com.house365.** { \
        public  <methods>;  \
    }'
    // keep 'public interface mypackage.MyInterface'
    // keep 'public class * implements mypackage.MyInterface'
}


publishing {
    publications {
        mavenJava(MavenPublication) {

            groupId = 'com.appunity.build'
            artifactId = 'android-csv-variants'
            version = '1.2.0'



            artifact sourcesJar
            artifact javadocJar
//            artifact rpmArtifact
            from components.java

            pom {
                name = 'Android CSV Variants'
                inceptionYear = '2015'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'zhangzhenli'
                        name = 'Zhang Zhenli'
                        email = 'zhangzhenli@live.com'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/zawn/android-csv-variants.git'
                    url = 'https://github.com/zawn/android-csv-variants'
                }
            }
        }
    }
    repositories {
        maven {
            // change URLs to point to your repos, e.g. http://my.org/repo
            def releasesRepoUrl = "$buildDir/repos/releases"
            def snapshotsRepoUrl = "$buildDir/repos/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

task('listJars') {
    doLast {
        configurations.shadow.each { File file -> println file.getAbsolutePath() }
    }
}

bintray {
    user = project.hasProperty('bintray_username') ? project.property('bintray_username') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintray_api_key') ? project.property('bintray_api_key') : System.getenv('BINTRAY_API_KEY')

    publications = ['mavenJava']
    pkg {
        userOrg = 'saic'
        repo = 'maven'
        name = 'android-csv-variants'
        desc = '用于在Android Gradle构建时通过CSV文件配置Variants'
        vcsUrl = 'https://github.com/zawn/android-csv-variants.git'
        licenses = ['Apache-2.0']
        labels = ['csv', 'android']
        publicDownloadNumbers = true
        version {
            name = '1.2.0'
        }
    }
}